# -*- coding: utf-8 -*-
"""text_classification_bert_zero_shot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AXv0nvcWh1Ckpsy5PxAo4snKNzjOzbQq
"""

import torch
from transformers import BertTokenizer, BertModel
from typing import List, Dict

# Load pre-trained BERT model and tokenizer
model_name = "bert-base-uncased"
model = BertModel.from_pretrained(model_name)
tokenizer = BertTokenizer.from_pretrained(model_name)

# Define categories and their descriptions
categories = ["Travel", "Sports", "Technology", "Politics", "Weather"]
category_descriptions = {
    "Travel": "Text describing travel and destinations.",
    "Sports": "Text related to sports and athletic events.",
    "Technology": "Text about technology and innovations.",
    "Politics": "Text discussing political topics and events.",
    "Weather": "Text describing weather conditions and forecasts."
}

def classify_zero_shot_bert(text: str, categories: List[str], category_descriptions: Dict[str, str]) -> str:
    # Encode the input text
    input_tokens = tokenizer(text, padding=True, truncation=True, return_tensors="pt")

    # Encode category descriptions
    category_tokens = tokenizer(list(category_descriptions.values()), padding=True, truncation=True, return_tensors="pt")

    # Use BERT to encode the input text
    with torch.no_grad():
        input_encoding = model(**input_tokens).last_hidden_state[:, 0, :]  # Use [CLS] token representation

    # Use BERT to encode the category descriptions
    with torch.no_grad():
        category_encodings = model(**category_tokens).last_hidden_state[:, 0, :]  # Use [CLS] token representation

    # Calculate similarity scores (e.g., cosine similarity)
    similarity_scores = torch.nn.functional.cosine_similarity(input_encoding, category_encodings)

    # Assign the input text to the category with the highest similarity score
    predicted_category = categories[similarity_scores.argmax().item()]

    return predicted_category

# Test zero-shot classification
input_text = "Ukraine, a country in Eastern Europe, has a rich cultural heritage and a diverse landscape."
predicted_category = classify_zero_shot_bert(input_text, categories, category_descriptions)
print(f"Predicted Category: {predicted_category}")



























